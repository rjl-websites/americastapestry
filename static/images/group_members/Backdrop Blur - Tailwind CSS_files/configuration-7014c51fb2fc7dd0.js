(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3551],{41992:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/configuration",function(){return a(56986)}])},56986:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return h}});var t=a(85893),e=a(11151),p=a(72788),o=a(25324),c=a(18412);let l={preflight:"Tailwind's base/reset styles",container:"The `container` component",accessibility:"The `sr-only` and `not-sr-only` utilities",backgroundOpacity:"The `background-color` opacity utilities like `bg-opacity-25`",borderOpacity:"The `border-color` opacity utilities like `border-opacity-25`",divideColor:"The between elements `border-color` utilities like `divide-slate-500`",divideWidth:"The between elements `border-width` utilities like `divide-x-2`",placeholderColor:"The placeholder `color` utilities like `placeholder-red-600`",placeholderOpacity:"The placeholder `color` opacity utilities like `placeholder-opacity-25`",space:'The "space-between" utilities like `space-x-4`',transform:"The `transform` utility (for enabling transform features)"};function i(){return(0,t.jsx)("div",{className:"prose prose-slate dark:prose-dark",children:(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Core Plugin"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsx)("tbody",{children:c.Z.sort(({plugin:n},{plugin:s})=>n<s?-1:1).map(({plugin:n,example:s})=>{var a;return(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:n})}),(0,t.jsx)("td",{children:(null===(a=l[n])||void 0===a?void 0:a.split(/`([^`]+)`/).map((n,s)=>s%2==0?n:(0,t.jsx)("code",{children:n},s)))||(0,t.jsxs)(t.Fragment,{children:["The"," ",(0,t.jsx)("code",{children:n.replace(/([a-z])([A-Z])/g,(n,s,a)=>`${s}-${a.toLowerCase()}`)})," ","utilities like ",(0,t.jsx)("code",{children:s})]})})]},n)})})]})})}var r=a(64637);let u=p.L,k=o.X_;function d(n){let s=Object.assign({p:"p",code:"code",a:"a",hr:"hr",pre:"pre",em:"em",strong:"strong"},(0,e.ah)(),n.components),{Editor:a,Heading:p}=s;return a||m("Editor",!0),p||m("Heading",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Because Tailwind is a framework for building bespoke user interfaces, it has been designed from the ground up with customization in mind."}),"\n",(0,t.jsxs)(s.p,{children:["By default, Tailwind will look for an optional ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file at the root of your project where you can define any customizations."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/**/*.{html,js}\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'blue\'</span><span class="token operator">:</span> <span class="token string">\'#1fb6ff\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'purple\'</span><span class="token operator">:</span> <span class="token string">\'#7e5bef\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'pink\'</span><span class="token operator">:</span> <span class="token string">\'#ff49db\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'orange\'</span><span class="token operator">:</span> <span class="token string">\'#ff7849\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'green\'</span><span class="token operator">:</span> <span class="token string">\'#13ce66\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'yellow\'</span><span class="token operator">:</span> <span class="token string">\'#ffc82c\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-dark\'</span><span class="token operator">:</span> <span class="token string">\'#273444\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray\'</span><span class="token operator">:</span> <span class="token string">\'#8492a6\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-light\'</span><span class="token operator">:</span> <span class="token string">\'#d3dce6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Graphik\'</span><span class="token punctuation">,</span> <span class="token string">\'sans-serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">serif</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Merriweather\'</span><span class="token punctuation">,</span> <span class="token string">\'serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">spacing</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'8xl\'</span><span class="token operator">:</span> <span class="token string">\'96rem\'</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'9xl\'</span><span class="token operator">:</span> <span class="token string">\'128rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'4xl\'</span><span class="token operator">:</span> <span class="token string">\'2rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Every section of the config file is optional, so you only have to specify what you’d like to change. Any missing sections will fall back to Tailwind’s ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js",children:"default configuration"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(p,{level:2,id:"creating-your-configuration-file",children:"Creating your configuration file"}),"\n",(0,t.jsxs)(s.p,{children:["Generate a Tailwind config file for your project using the Tailwind CLI utility included when you install the ",(0,t.jsx)(s.code,{children:"tailwindcss"})," npm package:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell">npx tailwindcss init</code>'}}),"\n",(0,t.jsxs)(s.p,{children:["This will create a minimal ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file at the root of your project:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(p,{level:3,id:"using-a-different-file-name",children:"Using a different file name"}),"\n",(0,t.jsxs)(s.p,{children:["To use a name other than ",(0,t.jsx)(s.code,{children:"tailwind.config.js"}),", pass it as an argument on the command-line:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell">npx tailwindcss init tailwindcss-config.js</code>'}}),"\n",(0,t.jsx)(s.p,{children:"When you use a custom file name, you will need to specify it as a command-line argument when compiling your CSS with the Tailwind CLI tool:"}),"\n",(0,t.jsx)(s.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell">npx tailwindcss <span class="token parameter variable">-c</span> ./tailwindcss-config.js <span class="token parameter variable">-i</span> input.css <span class="token parameter variable">-o</span> output.css</code>'}}),"\n",(0,t.jsx)(s.p,{children:"If you’re using Tailwind as a PostCSS plugin, you will need to specify your custom configuration path in your PostCSS configuration:"}),"\n",(0,t.jsx)(a,{filename:"postcss.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token string">\'./tailwindcss-config.js\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Alternatively, you can specify your custom configuration path using the ",(0,t.jsx)(s.code,{children:"@config"})," directive:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@config</span> <span class="token string">"./tailwindcss-config.js"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about the ",(0,t.jsx)(s.code,{children:"@config"})," directive in the ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#config",children:"Functions & Directives"})," documentation."]}),"\n",(0,t.jsx)(p,{level:3,id:"using-esm-or-type-script",children:"Using ESM or TypeScript"}),"\n",(0,t.jsx)(s.p,{children:"You can also configure Tailwind CSS in ESM or even TypeScript:"}),"\n",(0,t.jsxs)(r.E,{children:[(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>'}),(0,t.jsx)(a,{filename:"tailwind.config.ts",code:'<pre class="language-js"><code class="language-js"><span class="token keyword module">import</span> type <span class="token punctuation">{</span> <span class="token maybe-class-name">Config</span> <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">\'tailwindcss\'</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> satisfies <span class="token maybe-class-name">Config</span></code></pre>'})]}),"\n",(0,t.jsxs)(s.p,{children:["When you run ",(0,t.jsx)(s.code,{children:"npx tailwindcss init"}),", we’ll detect if your project is an ES Module and automatically generate your config file with the right syntax."]}),"\n",(0,t.jsxs)(s.p,{children:["You can also generate an ESM config file explicitly by using the ",(0,t.jsx)(s.code,{children:"--esm"})," flag:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-sh",dangerouslySetInnerHTML:{__html:'<code class="language-sh">npx tailwindcss init <span class="token parameter variable">--esm</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["To generate a TypeScript config file, use the ",(0,t.jsx)(s.code,{children:"--ts"})," flag:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-sh",dangerouslySetInnerHTML:{__html:'<code class="language-sh">npx tailwindcss init <span class="token parameter variable">--ts</span></code>'}}),"\n",(0,t.jsx)(p,{level:3,id:"generating-a-post-css-configuration-file",children:"Generating a PostCSS configuration file"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"-p"})," flag if you’d like to also generate a basic ",(0,t.jsx)(s.code,{children:"postcss.config.js"})," file alongside your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell">npx tailwindcss init <span class="token parameter variable">-p</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["This will generate a ",(0,t.jsx)(s.code,{children:"postcss.config.js"})," file in your project that looks like this:"]}),"\n",(0,t.jsx)(a,{filename:"postcss.config.js",code:'<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(p,{level:3,id:"scaffolding-the-entire-default-configuration",children:"Scaffolding the entire default configuration"}),"\n",(0,t.jsx)(s.p,{children:"For most users we encourage you to keep your config file as minimal as possible, and only specify the things you want to customize."}),"\n",(0,t.jsxs)(s.p,{children:["If you’d rather scaffold a complete configuration file that includes all of Tailwind’s default configuration, use the ",(0,t.jsx)(s.code,{children:"--full"})," option:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell">npx tailwindcss init <span class="token parameter variable">--full</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["You’ll get a file that matches the ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js",children:"default configuration file"})," Tailwind uses internally."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(p,{level:2,id:"configuration-options",nextElement:{type:"heading",depth:3},children:"Configuration options"}),"\n",(0,t.jsx)(p,{level:3,id:"content",children:"Content"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"content"})," section is where you configure the paths to all of your HTML templates, JS components, and any other files that contain Tailwind class names."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about configuring your content sources in the ",(0,t.jsx)(s.a,{href:"/docs/content-configuration",children:"Content Configuration"})," documentation."]}),"\n",(0,t.jsx)(p,{level:3,id:"theme",children:"Theme"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"theme"})," section is where you define your color palette, fonts, type scale, border sizes, breakpoints — anything related to the visual design of your site."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'blue\'</span><span class="token operator">:</span> <span class="token string">\'#1fb6ff\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'purple\'</span><span class="token operator">:</span> <span class="token string">\'#7e5bef\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'pink\'</span><span class="token operator">:</span> <span class="token string">\'#ff49db\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'orange\'</span><span class="token operator">:</span> <span class="token string">\'#ff7849\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'green\'</span><span class="token operator">:</span> <span class="token string">\'#13ce66\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'yellow\'</span><span class="token operator">:</span> <span class="token string">\'#ffc82c\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-dark\'</span><span class="token operator">:</span> <span class="token string">\'#273444\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray\'</span><span class="token operator">:</span> <span class="token string">\'#8492a6\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-light\'</span><span class="token operator">:</span> <span class="token string">\'#d3dce6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Graphik\'</span><span class="token punctuation">,</span> <span class="token string">\'sans-serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">serif</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Merriweather\'</span><span class="token punctuation">,</span> <span class="token string">\'serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">spacing</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'8xl\'</span><span class="token operator">:</span> <span class="token string">\'96rem\'</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'9xl\'</span><span class="token operator">:</span> <span class="token string">\'128rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'4xl\'</span><span class="token operator">:</span> <span class="token string">\'2rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about the default theme and how to customize it in the ",(0,t.jsx)(s.a,{href:"/docs/theme",children:"theme configuration guide"}),"."]}),"\n",(0,t.jsx)(p,{level:3,id:"plugins",children:"Plugins"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"plugins"})," section allows you to register plugins with Tailwind that can be used to generate extra utilities, components, base styles, or custom variants."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/forms\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/aspect-ratio\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@tailwindcss/typography\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss-children\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about writing your own plugins in the ",(0,t.jsx)(s.a,{href:"/docs/plugins",children:"plugin authoring guide"}),"."]}),"\n",(0,t.jsx)(p,{level:3,id:"presets",children:"Presets"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"presets"})," section allows you to specify your own custom base configuration instead of using Tailwind’s default base configuration."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@acmecorp/base-tailwind-config\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// Project-specific customizations</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about presets in the ",(0,t.jsx)(s.a,{href:"/docs/presets",children:"presets documentation"}),"."]}),"\n",(0,t.jsx)(p,{level:3,id:"prefix",children:"Prefix"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"prefix"})," option allows you to add a custom prefix to all of Tailwind’s generated utility classes. This can be really useful when layering Tailwind on top of existing CSS where there might be naming conflicts."]}),"\n",(0,t.jsxs)(s.p,{children:["For example, you could add a ",(0,t.jsx)(s.code,{children:"tw-"})," prefix by setting the ",(0,t.jsx)(s.code,{children:"prefix"})," option like so:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prefix</span><span class="token operator">:</span> <span class="token string">\'tw-\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"Now every class will be generated with the configured prefix:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.tw-text-left</span></span> <span class="token punctuation">{</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-text-center</span></span> <span class="token punctuation">{</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.tw-text-right</span></span> <span class="token punctuation">{</span>\n  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* etc. */</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["It’s important to understand that this prefix is added ",(0,t.jsx)(s.em,{children:"after"})," any variant modifiers. That means that classes with responsive or state modifiers like ",(0,t.jsx)(s.code,{children:"sm:"})," or ",(0,t.jsx)(s.code,{children:"hover:"})," will still have the responsive or state modifier ",(0,t.jsx)(s.em,{children:"first"}),", with your custom prefix appearing after the colon:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw-text-lg md:tw-text-xl tw-bg-red-500 <span class="code-highlight bg-code-highlight">hover:tw-bg-blue-500</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["The dash modifier for negative values should be added before your prefix, so ",(0,t.jsx)(s.code,{children:"-mt-8"})," would become ",(0,t.jsx)(s.code,{children:"-tw-mt-8"})," if you’ve configured ",(0,t.jsx)(s.code,{children:"tw-"})," as your prefix:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-tw-mt-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Prefixes are only added to classes generated by Tailwind; ",(0,t.jsx)(s.strong,{children:"no prefix will be added to your own custom classes."})]}),"\n",(0,t.jsx)(s.p,{children:"That means if you add your own custom utility like this:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.bg-brand-gradient</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"…the generated variants will not have your configured prefix:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.bg-brand-gradient</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.hover</span><span class="token punctuation">\\</span><span class="token class">:bg-brand-gradient</span><span class="token pseudo-class">:hover</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"If you’d like to prefix your own utilities as well, just add the prefix to the class definition:"}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.tw-bg-brand-gradient</span></span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(p,{level:3,id:"important",children:"Important"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"important"})," option lets you control whether or not Tailwind’s utilities should be marked with ",(0,t.jsx)(s.code,{children:"!important"}),". This can be really useful when using Tailwind with existing CSS that has high specificity selectors."]}),"\n",(0,t.jsxs)(s.p,{children:["To generate utilities as ",(0,t.jsx)(s.code,{children:"!important"}),", set the ",(0,t.jsx)(s.code,{children:"important"})," key in your configuration options to ",(0,t.jsx)(s.code,{children:"true"}),":"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Now all of Tailwind’s utility classes will be generated as ",(0,t.jsx)(s.code,{children:"!important"}),":"]}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.leading-none</span></span> <span class="token punctuation">{</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.leading-tight</span></span> <span class="token punctuation">{</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.25</span> <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.leading-snug</span></span> <span class="token punctuation">{</span>\n  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.375</span> <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* etc. */</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["This also applies to any custom utilities you define in your CSS using the ",(0,t.jsx)(s.code,{children:"@layer utilities"})," directive:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token comment">/* Input */</span>\n<span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.bg-brand-gradient</span></span> <span class="token punctuation">{</span>\n    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode color">#3490dc</span><span class="token punctuation">,</span> <span class="token hexcode color">#6574cd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* Output */</span>\n<span class="token selector"><span class="token class">.bg-brand-gradient</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token hexcode color">#3490dc</span><span class="token punctuation">,</span> <span class="token hexcode color">#6574cd</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(p,{level:4,id:"selector-strategy",children:"Selector strategy"}),"\n",(0,t.jsxs)(s.p,{children:["Setting ",(0,t.jsx)(s.code,{children:"important"})," to ",(0,t.jsx)(s.code,{children:"true"})," can introduce some issues when incorporating third-party JS libraries that add inline styles to your elements. In those cases, Tailwind’s ",(0,t.jsx)(s.code,{children:"!important"})," utilities defeat the inline styles, which can break your intended design."]}),"\n",(0,t.jsxs)(s.p,{children:["To get around this, you can set ",(0,t.jsx)(s.code,{children:"important"})," to an ID selector like ",(0,t.jsx)(s.code,{children:"#app"})," instead:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">important</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["This configuration will prefix all of your utilities with the given selector, effectively increasing their specificity without actually making them ",(0,t.jsx)(s.code,{children:"!important"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["After you specify the ",(0,t.jsx)(s.code,{children:"important"})," selector, you’ll need to ensure that the root element of your site matches it.  Using the example above, we would need to set our root element’s ",(0,t.jsx)(s.code,{children:"id"})," attribute to ",(0,t.jsx)(s.code,{children:"app"})," in order for styles to work properly."]}),"\n",(0,t.jsxs)(s.p,{children:["After your configuration is all set up and your root element matches the selector in your Tailwind config, all of Tailwind’s utilities will have a high enough specificity to defeat other classes used in your project, ",(0,t.jsx)(s.strong,{children:"without"})," interfering with inline styles:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector"><span class="token class">.high-specificity</span> <span class="token class">.nested</span> <span class="token class">.selector</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>high-specificity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nested<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token comment">&lt;!-- Will be red-500 --></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selector text-red-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n  <span class="token comment">&lt;!-- Will be #bada55 --></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-red-500<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode color">#bada55</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["When using the selector strategy, be sure that the template file that includes your root selector is included in your ",(0,t.jsx)(s.a,{href:"/docs/optimizing-for-production#basic-usage",children:"content configuration"}),", otherwise all of your CSS will be removed when building for production."]}),"\n",(0,t.jsx)(p,{level:4,id:"important-modifier",children:"Important modifier"}),"\n",(0,t.jsxs)(s.p,{children:["Alternatively, you can make any utility important by adding a ",(0,t.jsx)(s.code,{children:"!"})," character to the beginning:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!font-medium font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  This will be medium even though bold comes later in the CSS.\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"!"})," always goes at the beginning of the utility name, after any variants, but before any prefix:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sm:hover:!tw-font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"This can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control."}),"\n",(0,t.jsx)(p,{level:3,id:"separator",children:"Separator"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"separator"})," option lets you customize which character should be used to separate modifiers (screen sizes, ",(0,t.jsx)(s.code,{children:"hover"}),", ",(0,t.jsx)(s.code,{children:"focus"}),", etc.) from utility names (",(0,t.jsx)(s.code,{children:"text-center"}),", ",(0,t.jsx)(s.code,{children:"items-end"}),", etc.)."]}),"\n",(0,t.jsxs)(s.p,{children:["We use a colon by default (",(0,t.jsx)(s.code,{children:":"}),"), but it can be useful to change this if you’re using a templating language like ",(0,t.jsx)(s.a,{href:"https://pugjs.org",children:"Pug"})," that doesn’t support special characters in class names."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">separator</span><span class="token operator">:</span> <span class="token string">\'_\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(p,{level:3,id:"core-plugins",children:"Core Plugins"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"corePlugins"})," section lets you completely disable classes that Tailwind would normally generate by default if you don’t need them for your project."]}),"\n",(0,t.jsxs)(s.p,{children:["To disable specific core plugins, provide an object for ",(0,t.jsx)(s.code,{children:"corePlugins"})," that sets those plugins to ",(0,t.jsx)(s.code,{children:"false"}),":"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">corePlugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">float</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">objectFit</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">objectPosition</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"If you’d like to safelist which core plugins should be enabled, provide an array that includes a list of the core plugins you’d like to use:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">corePlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'margin\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'padding\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'backgroundColor\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"If you’d like to disable all of Tailwind’s core plugins and simply use Tailwind as a tool for processing your own custom plugins, provide an empty array:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">corePlugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"Here’s a list of every core plugin for reference:"}),"\n",(0,t.jsx)(i,{}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(p,{level:2,id:"using-multiple-configurations",children:"Using multiple configurations"}),"\n",(0,t.jsxs)(s.p,{children:["For projects that need to generate multiple CSS files using different Tailwind configurations, use the ",(0,t.jsx)(s.code,{children:"@config"})," directive to specify which config file should be used for each CSS entry point:"]}),"\n",(0,t.jsxs)(r.E,{children:[(0,t.jsx)(a,{filename:"site.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@config</span> <span class="token string">"./tailwind.site.config.js"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code></pre>'}),(0,t.jsx)(a,{filename:"admin.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@config</span> <span class="token string">"./tailwind.admin.config.js"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code></pre>'})]}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about the ",(0,t.jsx)(s.code,{children:"@config"})," directive in the ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#config",children:"Functions & Directives"})," documentation."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(p,{level:2,id:"referencing-in-java-script",children:"Referencing in JavaScript"}),"\n",(0,t.jsx)(s.p,{children:"It can often be useful to reference your configuration values in your own client-side JavaScript — for example to access some of your theme values when dynamically applying inline styles in a React or Vue component."}),"\n",(0,t.jsxs)(s.p,{children:["To make this easy, Tailwind provides a ",(0,t.jsx)(s.code,{children:"resolveConfig"})," helper you can use to generate a fully merged version of your configuration object:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token keyword module">import</span> <span class="token imports">resolveConfig</span> <span class="token keyword module">from</span> <span class="token string">\'tailwindcss/resolveConfig\'</span>\n<span class="token keyword module">import</span> <span class="token imports">tailwindConfig</span> <span class="token keyword module">from</span> <span class="token string">\'./tailwind.config.js\'</span>\n\n<span class="token keyword">const</span> fullConfig <span class="token operator">=</span> <span class="token function">resolveConfig</span><span class="token punctuation">(</span>tailwindConfig<span class="token punctuation">)</span>\n\nfullConfig<span class="token punctuation">.</span><span class="token property-access">theme</span><span class="token punctuation">.</span><span class="token property-access">width</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token comment">// => \'1rem\'</span>\n\nfullConfig<span class="token punctuation">.</span><span class="token property-access">theme</span><span class="token punctuation">.</span><span class="token property-access">screens</span><span class="token punctuation">.</span><span class="token property-access">md</span>\n<span class="token comment">// => \'768px\'</span>\n\nfullConfig<span class="token punctuation">.</span><span class="token property-access">theme</span><span class="token punctuation">.</span><span class="token property-access">boxShadow</span><span class="token punctuation">[</span><span class="token string">\'2xl\'</span><span class="token punctuation">]</span>\n<span class="token comment">// => \'0 25px 50px -12px rgba(0, 0, 0, 0.25)\'</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Note that this will transitively pull in a lot of our build-time dependencies, resulting in bigger client-side bundle size. To avoid this, we recommend using a tool like ",(0,t.jsx)(s.a,{href:"https://github.com/kentcdodds/babel-plugin-preval",children:"babel-plugin-preval"})," to generate a static version of your configuration at build-time."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(p,{level:2,id:"type-script-types",children:"TypeScript types"}),"\n",(0,t.jsxs)(s.p,{children:["We ship first-party TypeScript types for the ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file which give you all sorts of useful IDE support, and makes it a lot easier to make changes to your configuration without referencing the documentation quite as much."]}),"\n",(0,t.jsx)(s.p,{children:"Configuration files generated with Tailwind CLI include the necessary type annotation by default, but to configure TypeScript types manually, just add the type annotation above your configuration object:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'})]})}function g(n={}){return(0,t.jsx)(k,Object.assign({},n,{children:(0,t.jsx)(d,n)}))}var h=g;function m(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}g.layoutProps={Layout:u,meta:{title:"Configuration",description:"A guide to configuring and customizing your Tailwind installation."},slug:"configuration",tableOfContents:[{title:"Creating your configuration file",slug:"creating-your-configuration-file",children:[{title:"Using a different file name",slug:"using-a-different-file-name",children:[]},{title:"Using ESM or TypeScript",slug:"using-esm-or-type-script",children:[]},{title:"Generating a PostCSS configuration file",slug:"generating-a-post-css-configuration-file",children:[]},{title:"Scaffolding the entire default configuration",slug:"scaffolding-the-entire-default-configuration",children:[]}]},{title:"Configuration options",slug:"configuration-options",children:[{title:"Content",slug:"content",children:[]},{title:"Theme",slug:"theme",children:[]},{title:"Plugins",slug:"plugins",children:[]},{title:"Presets",slug:"presets",children:[]},{title:"Prefix",slug:"prefix",children:[]},{title:"Important",slug:"important",children:[{title:"Selector strategy",slug:"selector-strategy"},{title:"Important modifier",slug:"important-modifier"}]},{title:"Separator",slug:"separator",children:[]},{title:"Core Plugins",slug:"core-plugins",children:[]}]},{title:"Using multiple configurations",slug:"using-multiple-configurations",children:[]},{title:"Referencing in JavaScript",slug:"referencing-in-java-script",children:[]},{title:"TypeScript types",slug:"type-script-types",children:[]}]}},64637:function(n,s,a){"use strict";a.d(s,{E:function(){return u}});var t=a(85893),e=a(67294),p=a(59965),o=a(86010),c=a(4493);function l({className:n}){return(0,t.jsx)("div",{className:(0,o.Z)("pointer-events-none absolute inset-0",n)})}function i({children:n,selectedIndex:s,myIndex:a,marker:e}){let c=s===a,i={leading:c?null:s===a-1?"capped":"normal",trailing:c?null:s===a+1?"capped":"normal"};return(0,t.jsxs)(p.OK,{className:(0,o.Z)("flex items-center relative z-10 overflow-hidden px-4 py-1 [&:not(:focus-visible)]:focus:outline-none",c?"text-sky-300":"text-slate-400"),children:[(0,t.jsx)("span",{className:"z-10",children:n}),"close"===e&&(0,t.jsx)("svg",{viewBox:"0 0 4 4",className:"ml-2.5 flex-none w-1 h-1 text-slate-500 overflow-visible",children:(0,t.jsx)("path",{d:"M-1 -1L5 5M5 -1L-1 5",fill:"none",stroke:"currentColor",strokeLinecap:"round"})}),"modified"===e&&(0,t.jsx)("div",{className:"ml-2.5 flex-none w-1 h-1 rounded-full bg-current"}),!c&&(0,t.jsx)(l,{className:(0,o.Z)("bg-slate-700/50 border-y border-slate-500/30","capped"===i.leading&&"border-l rounded-tl","capped"===i.trailing&&"border-r rounded-tr")}),"normal"===i.trailing&&(0,t.jsx)(l,{className:"inset-y-px border-r border-slate-200/5 z-20"}),c&&(0,t.jsx)(l,{className:"border-b border-b-sky-300"})]})}let r={plain:({children:n})=>(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-xl shadow-md",children:n}),framed:({children:n,...s})=>(0,t.jsx)(c.RQ,{...s,children:(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-tl-xl shadow-md",children:n})})};function u({children:n,style:s="plain",actions:a,...c}){let[l,u]=(0,e.useState)(0),k=r[s];return(0,t.jsx)(k,{...c,children:(0,t.jsxs)(p.OK.Group,{onChange:u,children:[(0,t.jsxs)("div",{className:"flex",children:[(0,t.jsx)(p.OK.List,{className:"flex text-slate-400 text-xs leading-6 overflow-hidden rounded-tl-xl pt-2",children:n.map((n,s)=>(0,t.jsx)(i,{myIndex:s,selectedIndex:l,children:n.props.filename},n.props.filename))}),(0,t.jsx)("div",{className:"flex-auto flex pt-2 rounded-tr-xl overflow-hidden",children:(0,t.jsx)("div",{className:(0,o.Z)("flex-auto flex justify-end bg-slate-700/50 border-y border-slate-500/30 pr-4",l===n.length-1?"rounded-tl border-l":"")})}),a?(0,t.jsx)("div",{className:"absolute top-2 right-4 h-8 flex",children:a({selectedIndex:l})}):null]}),(0,t.jsx)(p.OK.Panels,{className:"flex overflow-auto",children:n.map(n=>(0,t.jsx)(p.OK.Panel,{className:"flex-none min-w-full p-5 text-sm leading-6 text-slate-50 ligatures-none",...n.props.code?{dangerouslySetInnerHTML:{__html:n.props.code}}:{children:n.props.children}},n.props.filename))})]})})}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return c}});var t=a(85893),e=a(97903),p=a(77929),o=a(87308);function c(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(p.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,t.jsx)(e.C,{nav:o.u,...n})]})}c.nav=o.u}},function(n){n.O(0,[3430,44,2484,9495,224,7308,9774,2888,179],function(){return n(n.s=41992)}),_N_E=n.O()}]);