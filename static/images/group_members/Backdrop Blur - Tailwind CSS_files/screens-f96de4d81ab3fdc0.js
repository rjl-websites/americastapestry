(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8238],{29924:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/screens",function(){return a(92227)}])},92227:function(n,s,a){"use strict";a.r(s);var e=a(85893),t=a(11151),p=a(72788),o=a(25324),c=a(50224);let r=p.L,l=o.X_;function i(n){let s=Object.assign({p:"p",code:"code",a:"a",pre:"pre"},(0,t.ah)(),n.components),{Editor:a}=s;return a||function(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Editor",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(c.X,{hidden:!0,level:2,id:"configuring-custom-screens",children:"Configuring custom screens"}),"\n",(0,e.jsxs)(s.p,{children:["You define your project’s breakpoints in the ",(0,e.jsx)(s.code,{children:"theme.screens"})," section of your ",(0,e.jsx)(s.code,{children:"tailwind.config.js"})," file. The keys become your ",(0,e.jsx)(s.a,{href:"/docs/responsive-design",children:"responsive modifiers"})," (like ",(0,e.jsx)(s.code,{children:"md:text-center"}),"), and the values are the ",(0,e.jsx)(s.code,{children:"min-width"})," where that breakpoint should start."]}),"\n",(0,e.jsx)(s.p,{children:"The default breakpoints are inspired by common device resolutions:"}),"\n",(0,e.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'sm\'</span><span class="token operator">:</span> <span class="token string">\'640px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 640px) { ... }</span>\n\n      <span class="token string-property property">\'md\'</span><span class="token operator">:</span> <span class="token string">\'768px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 768px) { ... }</span>\n\n      <span class="token string-property property">\'lg\'</span><span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1024px) { ... }</span>\n\n      <span class="token string-property property">\'xl\'</span><span class="token operator">:</span> <span class="token string">\'1280px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1280px) { ... }</span>\n\n      <span class="token string-property property">\'2xl\'</span><span class="token operator">:</span> <span class="token string">\'1536px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1536px) { ... }</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"Feel free to have as few or as many screens as you want, naming them in whatever way you’d prefer for your project."}),"\n",(0,e.jsx)(c.X,{level:3,id:"overriding-the-defaults",children:"Overriding the defaults"}),"\n",(0,e.jsxs)(s.p,{children:["To completely replace the default breakpoints, add your custom ",(0,e.jsx)(s.code,{children:"screens"})," configuration directly under the ",(0,e.jsx)(s.code,{children:"theme"})," key:"]}),"\n",(0,e.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'sm\'</span><span class="token operator">:</span> <span class="token string">\'576px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 576px) { ... }</span>\n\n      <span class="token string-property property">\'md\'</span><span class="token operator">:</span> <span class="token string">\'960px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 960px) { ... }</span>\n\n      <span class="token string-property property">\'lg\'</span><span class="token operator">:</span> <span class="token string">\'1440px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1440px) { ... }</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["Any default screens you haven’t overridden (such as ",(0,e.jsx)(s.code,{children:"xl"})," using the above example) will be removed and will not be available as screen modifiers."]}),"\n",(0,e.jsx)(c.X,{level:3,id:"overriding-a-single-screen",children:"Overriding a single screen"}),"\n",(0,e.jsxs)(s.p,{children:["To override a single screen size (like ",(0,e.jsx)(s.code,{children:"lg"}),"), add your custom ",(0,e.jsx)(s.code,{children:"screens"})," value under the ",(0,e.jsx)(s.code,{children:"theme.extend"})," key:"]}),"\n",(0,e.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'lg\'</span><span class="token operator">:</span> <span class="token string">\'992px\'</span><span class="token punctuation">,</span>\n        <span class="token comment">// => @media (min-width: 992px) { ... }</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"This will replace the default value for that breakpoint with the specified value."}),"\n",(0,e.jsx)(c.X,{level:3,id:"adding-new-breakpoints",children:"Adding new breakpoints"}),"\n",(0,e.jsxs)(s.p,{children:["The easiest way to add a new breakpoint is using the ",(0,e.jsx)(s.code,{children:"extend"})," key:"]}),"\n",(0,e.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'3xl\'</span><span class="token operator">:</span> <span class="token string">\'1600px\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"Tailwind will automatically sort your breakpoints to make sure smaller breakpoints are inserted first, and larger breakpoints are appended to the end."}),"\n",(0,e.jsx)(c.X,{level:3,id:"using-custom-screen-names",children:"Using custom screen names"}),"\n",(0,e.jsxs)(s.p,{children:["You can name your custom screens whatever you like, and are not limited to following the ",(0,e.jsx)(s.code,{children:"sm"}),"/",(0,e.jsx)(s.code,{children:"md"}),"/",(0,e.jsx)(s.code,{children:"lg"}),"/",(0,e.jsx)(s.code,{children:"xl"}),"/",(0,e.jsx)(s.code,{children:"2xl"}),"  convention that Tailwind uses by default."]}),"\n",(0,e.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'tablet\'</span><span class="token operator">:</span> <span class="token string">\'640px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 640px) { ... }</span>\n\n      <span class="token string-property property">\'laptop\'</span><span class="token operator">:</span> <span class="token string">\'1024px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1024px) { ... }</span>\n\n      <span class="token string-property property">\'desktop\'</span><span class="token operator">:</span> <span class="token string">\'1280px\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// => @media (min-width: 1280px) { ... }</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"Your responsive modifiers will reflect these custom screen names, so using them in your HTML would now look like this:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid grid-cols-1 <span class="code-highlight bg-code-highlight">tablet</span>:grid-cols-2 <span class="code-highlight bg-code-highlight">laptop</span>:grid-cols-3 <span class="code-highlight bg-code-highlight">desktop</span>:grid-cols-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}})]})}function u(n={}){return(0,e.jsx)(l,Object.assign({},n,{children:(0,e.jsx)(i,n)}))}s.default=u,u.layoutProps={Layout:r,meta:{title:"Customizing Screens",shortTitle:"Screens",description:"Customizing the default breakpoints for your project."},slug:"screens",tableOfContents:[{title:"Configuring custom screens",slug:"configuring-custom-screens",children:[{title:"Overriding the defaults",slug:"overriding-the-defaults",children:[]},{title:"Overriding a single screen",slug:"overriding-a-single-screen",children:[]},{title:"Adding new breakpoints",slug:"adding-new-breakpoints",children:[]},{title:"Using custom screen names",slug:"using-custom-screen-names",children:[]}]}]}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return c}});var e=a(85893),t=a(97903),p=a(77929),o=a(87308);function c(n){return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(p.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,e.jsx)(t.C,{nav:o.u,...n})]})}c.nav=o.u},11151:function(n,s,a){"use strict";a.d(s,{Zo:function(){return c},ah:function(){return p}});var e=a(67294);let t=e.createContext({});function p(n){let s=e.useContext(t);return e.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}let o={};function c({components:n,children:s,disableParentContext:a}){let c;return c=a?"function"==typeof n?n({}):n||o:p(n),e.createElement(t.Provider,{value:c},s)}}},function(n){n.O(0,[3430,44,9495,224,7308,9774,2888,179],function(){return n(n.s=29924)}),_N_E=n.O()}]);